/*! Splitting, ${npm_package_version} https://github.com/shshaw/splitting/ @license MIT */
!(function(n, t) {
    "object" == typeof exports && "undefined" != typeof module
        ? (module.exports = t())
        : "function" == typeof define && define.amd
            ? define(t)
            : (n.Splitting = t());
})(this, function() {
    "use strict";
    var e = document;
    function r(n, t, e) {
        n.style.setProperty("--" + t, e);
    }
    function c(n, t) {
        return n.appendChild(t), t;
    }
    function o(n, t) {
        return n && 0 != n.length ? (n.nodeName ? [n] : [].slice.call(n[0].nodeName ? n : (t || e).querySelectorAll(n))) : [];
    }
    function u(n, e, t) {
        t.some(function(n, t) {
            !(function t(n, e) {
                Array.isArray(n)
                    ? n.some(function(n) {
                          t(n, e);
                      })
                    : e(n);
            })(n, function(n) {
                r(n, e + "-index", t);
            });
        }),
            r(n, e + "-total", t.length);
    }
    var s = {};
    function n(n) {
        return (function t(e, n, r) {
            var i = r.indexOf(e);
            if (-1 == i)
                r.unshift(e),
                    (s[e].depends || []).some(function(n) {
                        t(n, e, r);
                    });
            else {
                var o = r.indexOf(n);
                r.splice(i, 1), r.splice(o, 0, e);
            }
            return r;
        })(n, 0, []).map(function(n) {
            return s[n];
        });
    }
    function t(n) {
        s[n.by] = n;
    }
    var a = 1,
        d = 2;
    function f(n, e, r, i) {
        n.normalize();
        var o = [],
            u = document.createDocumentFragment();
        return (
            i === d && o.push(n.previousSibling),
            n.childNodes.forEach(function(n) {
                if (n && n.childNodes && n.childNodes.length) return c(u, n), void o.push.apply(o, f(n, e, r, i));
                var t = (n.wholeText || "").trim();
                t.length
                    ? t.split(r).some(function(n, t) {
                          t && i === a && l(u, e, " "), o.push(l(u, e, n));
                      })
                    : c(u, n);
            }),
            (n.innerHTML = ""),
            n.appendChild(u),
            o
        );
    }
    function l(n, t, e) {
        var r = document.createElement("span");
        return (r.textContent = e), r.setAttribute("data-split", t), r.setAttribute("data-" + t, e), n.appendChild(r), r;
    }
    var i = {
            by: "words",
            key: "word",
            split: function(n, t) {
                return f(n, "word", /\s+/, a);
            }
        },
        p = {
            by: "chars",
            key: "char",
            depends: ["words"],
            split: function(n, r, t) {
                return t.words.reduce(function(n, t, e) {
                    return n.push.apply(n, f(t, "char", "", r.whitespace && e ? d : 0)), n;
                }, []);
            }
        };
    function m(n, e, r) {
        r = r || 1;
        var i = {};
        return (
            n.some(function(n) {
                var t = Math.round(n[e] * r) / r;
                (i[t] || (i[t] = [])).push(n);
            }),
            Object.keys(i)
                .map(Number)
                .sort()
                .map(function(n) {
                    return i[n];
                })
        );
    }
    var h = {
            by: "lines",
            key: "line",
            alias: 1,
            depends: ["words"],
            split: function(n, t, e) {
                return m(e.words, "offsetTop");
            }
        },
        y = {
            by: "items",
            key: "item",
            split: function(n, t) {
                return o(t.matching || n.children, n);
            }
        },
        v = {
            by: "rows",
            key: "row",
            split: function(n, t, e) {
                return m(o(t.matching || n.children, n), "offsetTop");
            }
        },
        b = {
            by: "columns",
            key: "column",
            split: function(n, t, e) {
                return m(o(t.matching || n.children, n), "offsetLeft");
            }
        };
    function g(i) {
        return o((i = i || {}).target || "[data-splitting]").map(function(e) {
            var r = { el: e };
            return (
                n(i.by || e.dataset.splitting || "chars").some(function(n) {
                    if (n.split) {
                        var t = n.split(e, i, r);
                        u(e, (n.key || "item") + (i.key ? "-" + i.key : ""), t), (r[n.by] = t);
                    }
                }),
                r
            );
        });
    }
    return (
        (g.html = function(n) {
            n = n || {};
            var t = document.createElement("span");
            return (t.innerHTML = n.content), (n.target = t), g(n), t.outerHTML;
        }),
        (g.add = t)(i),
        t(p),
        t(h),
        t(y),
        t(v),
        t(b),
        t({ by: "grid", depends: ["rows", "columns"] }),
        g
    );
});
